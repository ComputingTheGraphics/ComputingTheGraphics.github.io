function validUrl(url) {
    var http = new XMLHttpRequest();
    http.open('HEAD', url, false);
    http.send();
    return http.status != 404;
}

function goToPage(postName) {
    console.log(postName)

    // Check if it's a valid file stored in the posts directory
    // Update the url so back spacing / going back a tab works as expected.
    postLocation = window.location.href+"posts/"+postName+".md"
    suburl = validUrl(postLocation) ? postName : "404" 
    window.location.href = "https://www.computingthegraphics.com/?post="+suburl;

    hideSearch(true);
}

function createPostsMenu() {
    filepath =
        "https://www.computingthegraphics.com/posts/AUTO_GENERATED_POSTS_MENU.txt";
    
    // reads the file verbatim, doesnt do md to html conversion.
    var http = new XMLHttpRequest();
    http.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            createPostsMenuFromText(this.responseText);
        }
    };

    http.open("GET", filepath, true);
    http.send();
}

function createPostsMenuFromText(autogenMenuText) {
    console.log('CREATING POSTS MENU');
    
    var menuText = "<h4>Posts</h4>\n<ul>\n"
    const folderFormat = "\n<li>\n\t<span class='opener'>TITLE</span>\n\t<ul>\nPOSTS\n\t</ul>\n</li>\n"
    const postFormat = "\t\t<li><a href='javascript:void(0)' onclick=\"goToPage('POST_PATH')\">POST_TITLE</a></li>\n"

    var fileLines = autogenMenuText.split('\n');
    // Modified to include the folder title and full accumulated post info for its posts
    var onFolder = "";
    var folderString = ""; 
    // Modified to include the full accumulated post info for posts within a specific directory
    var postsString = "";
    for (i=0; i < fileLines.length; ++i) {
        line = fileLines[i];

        // listed the ifs in order of logical appearance
        if (line.startsWith('=')) { 
            // autogenerated warning
        } else if (!line.startsWith('\t')) {
            if (folderString != "") {
                // checking if we're the first folder hit or if we're a new folder in the list.
                // If this is hit, then we're not in the first folder, so we need to finish
                // updating menuText based on the previous folder's information.
                folderString = folderString.replace("POSTS", postsString);
                menuText += folderString;
                // reset
                folderString = "";
                postsString = "";
            }
            // folder - these line dont start with tabs.
            onFolder = line;
            folderString = "" + folderFormat.slice();
            folderString = folderString.replace("TITLE", line.replace(/_/g, ' '));
        } else {
            // file - these line start with tabs.
            var individualPost = "" + postFormat.slice();
            var post = line.substring(1); // remove leading '/t'
            var postPath = onFolder + '/' + post;
            individualPost = individualPost.replace("POST_PATH", postPath);
            individualPost = individualPost.replace("POST_TITLE", post.replace(/_/g, ' '));
            postsString += individualPost;
        }
    }

    // do last folder line
    folderString = folderString.replace("POSTS", postsString);
    menuText += folderString;

    menuText += "\n</ul>";

    console.log(menuText)
    document.getElementById("menu").innerHTML = menuText;
}

function getDocHeight(doc) {
    doc = doc || document;
    // stackoverflow.com/questions/1145850/
    var body = doc.body, html = doc.documentElement;
    var height = Math.max( body.scrollHeight, body.offsetHeight, 
        html.clientHeight, html.scrollHeight, html.offsetHeight );
    return height;
}

function setIframeHeight(id) {
    var ifrm = document.getElementById(id);
    var doc = ifrm.contentDocument? ifrm.contentDocument: 
        ifrm.contentWindow.document;
    ifrm.style.visibility = 'hidden';
    ifrm.style.height = "500px"; // reset to minimal height ...
    // IE opt. for bing/msn needs a bit added or scrollbar appears
    ifrm.style.height = getDocHeight( doc ) + 4 + "px";
    ifrm.style.visibility = 'visible';
}

function urlUpdated() {
    // Loading a post?
    console.log('load up a post')
	var post = getValueFromUrl('post');
    console.log('post is '+post)
	if (post == undefined || post == '') {
		post = 'Overview/welcome';
	}
    document.getElementById("mainloader").src = '/posts/'+post+'.html'
    console.log('heeerrrreeee');
    console.log('A');
    console.log(document.getElementById("mainloader").innerHTML);
    console.log('B');
    console.log(document.getElementById("mainloader").src);
    console.log('theeeerrree');

    // Searching?
	searchVal = getValueFromUrl('searchtext');
	if (post == "404") {
		setSearch("", searching=false);
		hideSearch(false);
	} else if (searchVal != undefined) {
		setSearch(searchVal, searching=true);
		hideSearch(false);
	}
}

function getValueFromUrl(key) {
	var urlString = window.location.href; 
	var url = new URL(urlString);
	return url.searchParams.get(key);
}

function hideSearch(hiding) {
	if (hiding) {
		document.webpagesearchbar.style.display = "none";
	} else {
		document.webpagesearchbar.style.display = "block";
	}
}

function setSearch(value, searching) {
	document.webpagesearchbar.searchtext.placeholder = value;
	if (searching) {
		search(value);
	}
}

// https://npm.runkit.com/flexsearch?q=#contextual_enable
var flexsearch = new FlexSearch({
	encode: "icase",
	suggest: true,
    tokenize: "full",
});
function setupSearch() {
	// loadAllPosts(flexsearch);
	console.log('setup search');
	console.log('setup search runs everytime the page is reloaded - is this okay?');
} 
setupSearch();


function boldString(str, substr) {
  var strRegExp = new RegExp(substr, 'g');
  return str.replace(strRegExp, '<b>'+substr+'</b>');
}

function dataFromPost(mdPost) {
    var allPosts = fs.readdirSync('/posts/');
    var fs = require('fs');
    fs.readFile('/posts/' + mdPost, function (err, data) {
      if (err) {
         return console.error(err);
      }
      console.log("Asynchronous read: " + data.toString());
      return data.toString();
   });
}

function search(value) {
	var linksText = "";
	var result = flexsearch.search(value);
	var letter_buffer = 40; // want 5 letter on either side of searched for value

	var adding_s = (result.length == 1) ? "" : "s";
	var linksText = "Found " + result.length + " relevant post" + adding_s + ":<br/><br/>";
	for (idx in result) {
		var resultPost = result[idx];

        var postText = dataFromPost(resultPost+'.md');

		var resultIdx = postText.indexOf(value);

		var valueBegIdx = resultIdx;
		var valueEndIdx = resultIdx + value.length;

		// finds subsection around the term
		var minIdx = valueBegIdx - letter_buffer;
		var maxIdx = valueEndIdx + letter_buffer + 1;
		minIdx = minIdx < 0 ? 0 : minIdx;
		maxIdx = maxIdx > postText.length ? postText.length : maxIdx;

		var resultText = "&emsp; ..." + boldString(postText.substring(minIdx, maxIdx), value) + "...";
		var resultLink = "&emsp; <a href=\'javascript:void(0)\' onclick=\"goToPage(\'"+resultPost+"\');\">"+resultPost+"</a>";

		linksText += "" + resultLink + "<br/>" + resultText + "<br/>";
	}

	if (linksText == "") {
		linksText = "No result was found... :("
	}

	document.getElementById('searchoutput').innerHTML = linksText;
}
